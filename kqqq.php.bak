<?php
/**
* @file HTMLParser.php
*
* @class HTMLParser
*
* @bref 웹사이트의 소스를 파싱하여 결과를 돌려줌
* 
* @date 2014.01.23
*
* @author 너구리안주(impactlife@naver.com)
*
* @section MODIFYINFO
*     - 2014.05.20 - 기존은 지정된 행과 열의 결과만 추출하게 했는데 이제 그냥 다 저장한다
*
*/

class HTMLParser{
    
    private $url;
    private $refer;
    private $patterns;
    private $buffer;
    private $http_code;
    private $cookie_file;
    
    /**
    * @bref 생성자
    **/
    public function __construct(){
        $this->patterns = array();
        $this->buffer = '';
        $this->http_code = 0;
        $this->cookie_file = 'cookie.txt';
    }

    /**
    * @bref url 세팅
    * @param string URL
    **/    
    public function setUrl($url){
        $this->url = $url;
    }
    
    /**
    * @bref 2014.01.28 추가 - REFERER 세팅 : refer없으면 내용이 안나오는 사이트가 있음
    * @param string URL
    **/
    public function setRefer($refer){
        $this->refer = $refer;
    }

    /**
    * @bref 패턴과 파싱결과의 row, col 세팅
    * @param string 패턴
    **/    
    public function addPattern($pattern){
        $this->patterns[] = $pattern;
    }
    
    /**
    * @bref 쿠키파일을 지정한다
    * @param string
    **/
    public function setCookieFile($filepath){
        $this->cookie_file = $filepath;
    }

    /**
    * @bref 지정한 url의 컨텐츠를 불러들인다
    **/    
    private function loadContent(){
        
        //$agent = 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)'; 
        $agent = 'Mozilla/5.0 (Windows NT 6.1; rv:26.0) Gecko/20100101 Firefox/26.0';
        $curlsession = curl_init(); 
        curl_setopt ($curlsession, CURLOPT_URL,            $this->url); 
        curl_setopt ($curlsession, CURLOPT_HEADER,          1); 
        
        //http 응답코드가 302일때 redirect_url 로 따라감
        curl_setopt ($curlsession, CURLOPT_FOLLOWLOCATION, TRUE);
        curl_setopt ($curlsession, CURLOPT_RETURNTRANSFER,  true); 
        
        curl_setopt ($curlsession, CURLOPT_POST,            0); 
        curl_setopt ($curlsession, CURLOPT_USERAGENT,      $agent); 
        curl_setopt ($curlsession, CURLOPT_REFERER,        $this->refer); 
        curl_setopt ($curlsession, CURLOPT_TIMEOUT,        3); 
        curl_setopt ($curlsession, CURLOPT_COOKIEJAR, $this->cookie_file);
        curl_setopt ($curlsession, CURLOPT_COOKIEFILE, $this->cookie_file);
        
        $this->buffer = curl_exec ($curlsession); 
        $cinfo = curl_getinfo($curlsession);
        
        $this->http_code = $cinfo['http_code'];
        curl_close($curlsession); 
        
        if ($this->http_code != 200) { 
            $this->buffer = '';
        }
    }
    
    /**
    * @bref 결과를 리턴한다
    * @return array 모든 결과가 담긴 배열
    **/
    public function getResult(){
        
        $result = array();
        
        $this->loadContent();
        
        foreach($this->patterns as $item){
            $result[] = $this->getParseResult($item);
        }
        
        return $result;
    }
    
    /**
    * @bref 파싱
    * @param string 패턴
    * @return array 하나의 정규식에 대한 파싱 결과가 담긴 배열
    **/
    private function getParseResult($pattern){
        $result = array();
        preg_match_all($pattern, $this->buffer, $matches);
        
        //첫번째 요소는 날린다
        if(count($matches) > 0)    array_splice($matches, 0, 1);
        
        return $matches;
    }
}



function calcPage($url)
{
	$totalPages = 0;
	if($url != '')
	{
		$iup = new HTMLParser();
		$iup->setUrl($url);
	
		//총 게시글 건수를 얻기위한 패턴 추가
		$iup->addPattern('/<span[^>]*class=\"f_nb f_l\">1-10 \/(.*)건/' );
	
		//파싱결과를 돌려줌
		$result = $iup->getResult();
	
		//결과를 보기좋게 출력
		//총 페이지 구함
		$totalPages = $result[0][0][0]/10 + 1;
	}
	return $totalPages;
}

function parsingPage($url)
{
	$iup = new HTMLParser();
	$iup->setUrl($url);
	
	//검색된 글 URL들을 얻기위해 패턴 추가'/<img[^>]*src=["\']?([^>"\']+)["\']?[^>]*>/'
	$iup->addPattern('/<a[^>]*class=\"f_link_bu f_l\" href=["\']?([^>"\']+)["\']?[^>]*>/');
	
	//파싱
	$result = $iup->getResult();
	
	return $result;
}

function overlapPage($url)
{
	//전역변수 사용
	global $compareStr;
	//값이 같으면 true
	if($url == $compareStr)
	{
		return true;
	}
	else
	{
		//다르면 url로 기존것을 덮고 false 반환
		$compareStr = $url;
		return false;
	}
}

function makeBasicUrl($searcher)
{
	$basicUrl = 'http://search.daum.net/search?w=cafe&q=';
	$basicUrl .= $searcher;
	$basicUrl .= '&m=board&ASearchType=1&lpp=10&rlang=0&period=u&p=';
	return $basicUrl; 
}

function makeDateUrl($searchRange)
{
	$searchDate = '&sd=';
	$searchDate .= $searchRange[0];
	$searchDate .= '000000&ed=';
	$searchDate .= $searchRange[1];
	$searchDate .= '235959&page=1';
	return $searchDate;
}

function makeUrl($basicUrl, $page, $dateUrl)
{
	$url = $basicUrl;
	$url .= $page;
	$url .= $dateUrl;
	return $url;
}

function writeUrl($basicUrl, $dateUrl)
{
	//초기 url 생성
	$url = makeUrl($basicUrl, 1, $dateUrl);
	
	//총 페이지 계산
	$totalPage = calcPage($url);
	
	$newTextPath = '/usr/local/apache/htdocs/';
	$newTextPath .= $searcher;
	$newTextPath .= 'txt';
	
	$fd = fopen($newTextPath, 'w+');
		
	//쓰기용 버퍼 생성
	$fwrireBuff = "";
	
	for($page = "1"; $page < $totalPage + "1"; $page++)
	{
		$url = makeUrl($basicUrl, $page, $dateUrl);
		
		//url을 얻어옴
		$result = parsingPage($url);
	
		//중복 방지를 위한 비교
		if(!overlapPage($result[0][0][1]))
		{
			//result들을 쓰기 시작
			for($resultCnt = 1; $resultCnt < 11; $resultCnt++)
			{
				//쓰기용 버퍼를 이용해 url을 씀
				if($result[0][0][$resultCnt] == NULL)
					break;
				$fWriteBuff .= $result[0][0][$resultCnt];
				$fWriteBuff .= "\n";
			}
		}
		else
		{
			break;
		}
	
	}
	fwrite($fd, $fWriteBuff);
	fclose($fd);
}

function getUrl($searchRange, $searcher)
{
	

	$basicUrl = makeBasicUrl($searcher);
	$dateUrl = makeDateUrl($searchRange);
	
	writeUrl($basicUrl, $dateUrl);

}
$compareStr = "";
$searchRange = array('20140701', '20140707');
$searcher = '아이폰6';

getUrl($searchRange, $searcher);

?>